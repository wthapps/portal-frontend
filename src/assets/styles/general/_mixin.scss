@import "flex";

$prefix-for-webkit: true !default;
$prefix-for-mozilla: true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera: true !default;
$prefix-for-spec: true !default;

@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    } @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    } @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    } @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    } @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    } @else {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

// prefix declarations
@mixin prefixed($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin disable-prefix-for-all() {
  $prefix-for-webkit: false !global;
  $prefix-for-mozilla: false !global;
  $prefix-for-microsoft: false !global;
  $prefix-for-opera: false !global;
  $prefix-for-spec: false !global;
}

//
//Transform
//
@mixin transform($property: none) {
  // none | <transform-function>
  @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
  // x-axis - left | center | right  | length | %
  // y-axis - top  | center | bottom | length | %
  // z-axis -                          length
  @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style($style: flat) {
  @include prefixer(transform-style, $style, webkit moz ms o spec);
}

//
//Set a rem font size with pixel fallback
//

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

//p {
//  @include font-size(14px)
//}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote("../../../fonts/" + $path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
//
//Create a font face rule. Embedded OpenType, WOFF2, WOFF, TrueType, and SVG files are automatically sourced.
//
//@include font-face(Samplino, fonts/Samplino);
//Rendered as CSS:
//
//@font-face {
//  font-family: "Samplino";
//  src: url("fonts/Samplino.eot?") format("eot"),
//  url("fonts/Samplino.woff2") format("woff2"),
//  url("fonts/Samplino.woff") format("woff"),
//  url("fonts/Samplino.ttf") format("truetype"),
//  url("fonts/Samplino.svg#Samplino") format("svg");
//}
//
//
//
//@include font-face("Samplina Neue", fonts/SamplinaNeue, bold, italic);
//@font-face {
//    font-family: "Samplina Neue";
//    font-style: italic;
//    font-weight: bold;
//    src: url("fonts/SamplinaNeue.eot?") format("eot"),
//         url("fonts/SamplinaNeue.woff2") format("woff2"),
//         url("fonts/SamplinaNeue.woff") format("woff"),
//         url("fonts/SamplinaNeue.ttf") format("truetype"),
//         url("fonts/SamplinaNeue.svg#Samplina_Neue") format("svg");
//}
//
//
//
//
//@include font-face(Samplinoff, fonts/Samplinoff, null, null, woff);
//@font-face {
//    font-family: "Samplinoff";
//    src: url("fonts/Samplinoff.woff") format("woff");
//}
//
//
//@include font-face(Samplinal, fonts/Samplinal, 500, normal, eot woff2 woff);
//@font-face {
//    font-family: "Samplinal";
//    font-style: normal;
//    font-weight: 500;
//    src: url("fonts/Samplinal.eot?") format("eot"),
//         url("fonts/Samplinal.woff2") format("woff2"),
//         url("fonts/Samplinal.woff") format("woff");
//}
//


//
//SVG background images with PNG and retina fallback
//
$image-path: '../images' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $size:false) {
  background-image: url(#{$image-path}/#{$name}.svg);
  @if ($size) {
    background-size: $size;
  }
  .no-svg & {
    background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

    @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
      background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
    }
  }
}

//body {
//  @include background-image('pattern');
//}

//
//Animations and keyframes
//

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

//@include keyframes(slide-down) {
//  0% { opacity: 1; }
//  90% { opacity: 0; }
//}
//
//.element {
//  width: 100px;
//  height: 100px;
//  background: black;
//  @include animation('slide-down 5s 3');
//}

//
//Cross browser opacity
//

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

//.faded-text {
//  @include opacity(0.8);
//}

//
// Centering Mixin
//
@mixin center($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);

  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}


//.parent {
//  position: relative;
//}
//
//.child {
//  &.both {
//    @include center;
//  }
//
//  &.horizontal {
//    @include center(true, false);
//  }
//
//  &.vertical {
//    @include center(false, true);
//  }
//}



// --------------------------------------------------------
// arrows
// --------------------------------------------------------
// $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
// $color: hex, rgb or rbga
// $size: px or em
// @example
// .element{
//     @include make-arrow(top, #000, 50px, 50px);
// }
@mixin make-arrow($direction, $color, $size-w, $size-h) {
  display: block;
  height: 0;
  width: 0;

  @if $direction == 'top' {
    border-left: $size-w solid transparent;
    border-right: $size-w solid transparent;
    border-bottom: $size-h solid $color;
  } @else if $direction == 'right' {
    border-top: $size-w solid transparent;
    border-bottom: $size-w solid transparent;
    border-left: $size-h solid $color;
  } @else if $direction == 'bottom' {
    border-top: $size-h solid $color;
    border-right: $size-w solid transparent;
    border-left: $size-w solid transparent;
  } @else if $direction == 'left' {
    border-top: $size-w solid transparent;
    border-right: $size-h solid $color;
    border-bottom: $size-w solid transparent;
  } @else if $direction == 'top-left' {
    border-top: $size-h solid $color;
    border-right: $size-w solid transparent;
  } @else if $direction == 'top-right' {
    border-top: $size-h solid $color;
    border-left: $size-w solid transparent;
  } @else if $direction == 'bottom-left' {
    border-bottom: $size-h solid $color;
    border-right: $size-w solid transparent;
  } @else if $direction == 'bottom-right' {
    border-bottom: $size-h solid $color;
    border-left: $size-w solid transparent;
  }
}

@mixin grayscale_element($value) {
  -webkit-filter: #{"grayscale(#{$value})"};
  -moz-filter: #{"grayscale(#{$value})"};
  filter:#{"grayscale(#{$value})"};
}

