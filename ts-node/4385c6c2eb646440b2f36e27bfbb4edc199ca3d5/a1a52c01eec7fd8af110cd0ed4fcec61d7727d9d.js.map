{"version":3,"file":"/home/phat/SourceCode/portal-frontend/tools/tasks/seed/build.html_css.ts","sources":["/home/phat/SourceCode/portal-frontend/tools/tasks/seed/build.html_css.ts"],"names":[],"mappings":"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","sourcesContent":["import * as autoprefixer from 'autoprefixer';\nimport * as cssnano from 'cssnano';\nimport * as gulp from 'gulp';\nimport * as gulpLoadPlugins from 'gulp-load-plugins';\nimport * as merge from 'merge-stream';\nimport * as util from 'gulp-util';\nimport { join } from 'path';\n\nimport {\n  APP_DEST,\n  APP_SRC,\n  BROWSER_LIST,\n  CSS_DEST,\n  CSS_SRC,\n  DEPENDENCIES,\n  ENABLE_SCSS,\n  ENV,\n  TMP_DIR,\n  getPluginConfig,\n} from '../../config';\n\nconst plugins = <any>gulpLoadPlugins();\nconst cleanCss = require('gulp-clean-css');\nconst gulpConcatCssConfig = getPluginConfig('gulp-concat-css');\n\nconst processors = [\n  autoprefixer({\n    browsers: BROWSER_LIST\n  })\n];\n\nconst reportPostCssError = (e: any) => util.log(util.colors.red(e.message));\n\nconst isProd = ENV === 'prod';\n\nif (isProd) {\n  processors.push(\n    cssnano({\n      discardComments: {removeAll: true},\n      discardUnused: false, // unsafe, see http://goo.gl/RtrzwF\n      zindex: false, // unsafe, see http://goo.gl/vZ4gbQ\n      reduceIdents: false // unsafe, see http://goo.gl/tNOPv0\n    })\n  );\n}\n\n/**\n * Copies all HTML files in `src/client` over to the `dist/tmp` directory.\n */\nfunction prepareTemplates() {\n  return gulp.src(join(APP_SRC, '**', '*.html'))\n    .pipe(gulp.dest(TMP_DIR));\n}\n\n/**\n * Execute the appropriate component-stylesheet processing method based on user stylesheet preference.\n */\nfunction processComponentStylesheets() {\n  return ENABLE_SCSS ? processComponentScss() : processComponentCss();\n}\n\n/**\n * Process scss files referenced from Angular component `styleUrls` metadata\n */\nfunction processComponentScss() {\n  return gulp.src(join(APP_SRC, '**', '*.scss'))\n    .pipe(isProd ? plugins.cached('process-component-scss') : plugins.util.noop())\n    .pipe(isProd ? plugins.progeny() : plugins.util.noop())\n    .pipe(plugins.sourcemaps.init())\n    .pipe(plugins.sass(getPluginConfig('gulp-sass')).on('error', plugins.sass.logError))\n    .pipe(plugins.postcss(processors))\n    .on('error', reportPostCssError)\n    .pipe(plugins.sourcemaps.write(isProd ? '.' : ''))\n    .pipe(gulp.dest(isProd ? TMP_DIR : APP_DEST));\n}\n\n/**\n * Processes the CSS files within `src/client` excluding those in `src/client/assets` using `postcss` with the\n * configured processors.\n */\nfunction processComponentCss() {\n  return gulp.src([\n    join(APP_SRC, '**', '*.css'),\n    '!' + join(APP_SRC, 'assets', '**', '*.css')\n  ])\n    .pipe(isProd ? plugins.cached('process-component-css') : plugins.util.noop())\n    .pipe(plugins.postcss(processors))\n    .on('error', reportPostCssError)\n    .pipe(gulp.dest(isProd ? TMP_DIR : APP_DEST));\n}\n\n/**\n * Execute external-stylesheet processing method based on presence of --scss flag.\n */\nfunction processExternalStylesheets() {\n  return ENABLE_SCSS ? processAllExternalStylesheets() : processExternalCss();\n}\n\n/**\n * Process scss stylesheets located in `src/client/css` and any css dependencies specified in\n * the global project configuration.\n */\nfunction processAllExternalStylesheets() {\n  return merge(getExternalCssStream(), getExternalScssStream())\n    .pipe(isProd ? plugins.concatCss(gulpConcatCssConfig.targetFile, gulpConcatCssConfig.options) : plugins.util.noop())\n    .pipe(plugins.postcss(processors))\n    .on('error', reportPostCssError)\n    .pipe(isProd ? cleanCss() : plugins.util.noop())\n    .pipe(gulp.dest(CSS_DEST));\n}\n\n/**\n * Get a stream of external css files for subsequent processing.\n */\nfunction getExternalCssStream() {\n  return gulp.src(getExternalCss())\n    .pipe(isProd ? plugins.cached('process-external-css') : plugins.util.noop());\n}\n\n/**\n * Get an array of filenames referring to all external css stylesheets.\n */\nfunction getExternalCss() {\n  return DEPENDENCIES.filter(dep => /\\.css$/.test(dep.src)).map(dep => dep.src);\n}\n\n/**\n * Get a stream of external scss files for subsequent processing.\n */\nfunction getExternalScssStream() {\n  return gulp.src(getExternalScss())\n    .pipe(isProd ? plugins.cached('process-external-scss') : plugins.util.noop())\n    .pipe(isProd ? plugins.progeny() : plugins.util.noop())\n    .pipe(plugins.sass(getPluginConfig('gulp-sass')).on('error', plugins.sass.logError));\n}\n\n/**\n * Get an array of filenames referring to external scss stylesheets located in the global DEPENDENCIES\n * as well as in `src/css`.\n */\nfunction getExternalScss() {\n  return DEPENDENCIES.filter(dep => /\\.scss$/.test(dep.src)).map(dep => dep.src)\n    .concat([join(CSS_SRC, '**', '*.scss')]);\n}\n\n/**\n * Processes the external CSS files using `postcss` with the configured processors.\n */\nfunction processExternalCss() {\n  return getExternalCssStream()\n    .pipe(plugins.postcss(processors))\n    .pipe(isProd ? plugins.concatCss(gulpConcatCssConfig.targetFile, gulpConcatCssConfig.options) : plugins.util.noop())\n    .on('error', reportPostCssError)\n    .pipe(isProd ? cleanCss() : plugins.util.noop())\n    .pipe(gulp.dest(CSS_DEST));\n}\n\n/**\n * Executes the build process, processing the HTML and CSS files.\n */\nexport = () => merge(processComponentStylesheets(), prepareTemplates(), processExternalStylesheets());\n"]}