{"version":3,"file":"/home/phat/SourceCode/portal-frontend/tools/utils/seed/server.ts","sources":["/home/phat/SourceCode/portal-frontend/tools/utils/seed/server.ts"],"names":[],"mappings":";AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,QAAQ,WAAM,8BAA8B,CAAC,CAAA;AACzD,IAAY,YAAY,WAAM,MAAM,CAAC,CAAA;AACrC,qBAAwB,MAAM,CAAC,CAAA;AAC/B,IAAY,WAAW,WAAM,cAAc,CAAC,CAAA;AAE5C,IAAY,cAAc,WAAM,qBAAqB,CAAC,CAAA;AACtD,uBAA+E,cAAc,CAAC,CAAA;AAK9F;IACE,cAAc,CAAC,MAAM,EAAE,CAAC;AAC1B,CAAC;AAFe,gBAAQ,WAEvB,CAAA;AAOD,0BAAiC,CAAK;IACpC,IAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC;IACtB,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC;AAHe,wBAAgB,mBAG/B,CAAA;AAKD;IACE,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IAEvB,MAAM,CAAC,GAAG,CACR,iBAAQ,EACR,WAAW,CAAC,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,kBAAS,CAAC,CAAC,CAC/C,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC,kBAAS,EAAE;QACvB,OAAA,YAAY,CAAC,mBAAmB,GAAG,kBAAS,GAAG,iBAAQ,CAAC;IAAxD,CAAwD,CACzD,CAAC;AACJ,CAAC;AAXe,iBAAS,YAWxB,CAAA;AAKD;IACE,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IACvB,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;IACrC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAE9B,MAAM,CAAC,GAAG,CACR,iBAAQ,EACR,WAAW,CAAC,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC,CAChD,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC,sBAAa,EAAE;QAC3B,OAAA,YAAY,CAAC,mBAAmB,GAAG,sBAAa,GAAG,iBAAQ,CAAC;IAA5D,CAA4D,CAC7D,CAAC;AACJ,CAAC;AAbe,qBAAa,gBAa5B,CAAA;AAKD;IACE,IAAI,IAAI,GAAG,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,kBAAS,CAAC,CAAC;IAC7C,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IACvB,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;IACrC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAE9B,MAAM,CAAC,GAAG,CAAC,iBAAQ,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IAExC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,MAAA,IAAI,EAAE,CAAC,CAAC,CAAC;IAE7C,MAAM,CAAC,MAAM,CAAC,aAAI,EAAE;QAClB,OAAA,YAAY,CAAC,mBAAmB,GAAG,aAAI,GAAG,iBAAQ,CAAC;IAAnD,CAAmD,CACpD,CAAC;AACJ,CAAC;AAbe,iBAAS,YAaxB,CAAA;AAAA,CAAC","sourcesContent":["import * as express from 'express';\nimport * as fallback from 'express-history-api-fallback';\nimport * as openResource from 'open';\nimport { resolve } from 'path';\nimport * as serveStatic from 'serve-static';\n\nimport * as codeChangeTool from './code_change_tools';\nimport { APP_BASE, COVERAGE_PORT, DOCS_DEST, DOCS_PORT, PORT, PROD_DEST } from '../../config';\n\n/**\n * Serves the Single Page Application. More specifically, calls the `listen` method, which itself launches BrowserSync.\n */\nexport function serveSPA() {\n  codeChangeTool.listen();\n}\n\n/**\n * This utility method is used to notify that a file change has happened and subsequently calls the `changed` method,\n * which itself initiates a BrowserSync reload.\n * @param {any} e - The file that has changed.\n */\nexport function notifyLiveReload(e:any) {\n  let fileName = e.path;\n  codeChangeTool.changed(fileName);\n}\n\n/**\n * Starts a new `express` server, serving the static documentation files.\n */\nexport function serveDocs() {\n  let server = express();\n\n  server.use(\n    APP_BASE,\n    serveStatic(resolve(process.cwd(), DOCS_DEST))\n  );\n\n  server.listen(DOCS_PORT, () =>\n    openResource('http://localhost:' + DOCS_PORT + APP_BASE)\n  );\n}\n\n/**\n * Starts a new `express` server, serving the static unit test code coverage report.\n */\nexport function serveCoverage() {\n  let server = express();\n  let compression = require('compression');\n      server.use(compression());\n\n  server.use(\n    APP_BASE,\n    serveStatic(resolve(process.cwd(), 'coverage'))\n  );\n\n  server.listen(COVERAGE_PORT, () =>\n    openResource('http://localhost:' + COVERAGE_PORT + APP_BASE)\n  );\n}\n\n/**\n * Starts a new `express` server, serving the built files from `dist/prod`.\n */\nexport function serveProd() {\n  let root = resolve(process.cwd(), PROD_DEST);\n  let server = express();\n  let compression = require('compression');\n      server.use(compression());\n\n  server.use(APP_BASE, serveStatic(root));\n\n  server.use(fallback('index.html', { root }));\n\n  server.listen(PORT, () =>\n    openResource('http://localhost:' + PORT + APP_BASE)\n  );\n};\n"]}