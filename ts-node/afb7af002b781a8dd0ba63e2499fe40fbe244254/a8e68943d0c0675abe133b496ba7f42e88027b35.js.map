{"version":3,"file":"/home/phat/SourceCode/portal-frontend/tools/utils/seed/tasks_tools.ts","sources":["/home/phat/SourceCode/portal-frontend/tools/utils/seed/tasks_tools.ts"],"names":[],"mappings":";AAAA,mBAAmD,IAAI,CAAC,CAAA;AACxD,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAClC,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,qBAAqB,MAAM,CAAC,CAAA;AAC5B,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAMnC,mBAA0B,IAAY;IACpC,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,OAAO,CAAC,IAAI,EAAE,UAAA,QAAQ,IAAI,OAAA,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;AAC1D,CAAC;AAHe,iBAAS,YAGxB,CAAA;AAOD,sBAAsB,QAAgB,EAAE,IAAY;IAClD,IAAM,IAAI,GAAG,WAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAClC,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEhE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,IAAS;QAC5B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;QAED,IAAM,iBAAiB,GAAG,IAAI,EAAE,CAAC;QACjC,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,iBAAiB,CAAC;QAC3B,CAAC;QAID,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC;AAOD,iBAAiB,IAAY,EAAE,EAA8B;IAC3D,EAAE,CAAC,CAAC,CAAC,eAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC;IACT,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,CAAC;IAEX,cAAc,IAAY;QACxB,IAAI,KAAK,GAAG,gBAAW,CAAC,IAAI,CAAC,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACzC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,OAAO,GAAG,WAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,cAAS,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtD,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACzC,EAAE,CAAC,QAAQ,CAAC,CAAC;YACf,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { existsSync, lstatSync, readdirSync } from 'fs';\nimport * as gulp from 'gulp';\nimport * as util from 'gulp-util';\nimport * as isstream from 'isstream';\nimport { join } from 'path';\nimport * as tildify from 'tildify';\n\n/**\n * Loads the tasks within the given path.\n * @param {string} path - The path to load the tasks from.\n */\nexport function loadTasks(path: string): void {\n  util.log('Loading tasks folder', util.colors.yellow(path));\n  readDir(path, taskname => registerTask(taskname, path));\n}\n\n/**\n * Registers the task by the given taskname and path.\n * @param {string} taskname - The name of the task.\n * @param {string} path     - The path of the task.\n */\nfunction registerTask(taskname: string, path: string): void {\n  const TASK = join(path, taskname);\n  util.log('Registering task', util.colors.yellow(tildify(TASK)));\n\n  gulp.task(taskname, (done: any) => {\n    const task = require(TASK);\n    if (task.length > 0) {\n      return task(done);\n    }\n\n    const taskReturnedValue = task();\n    if (isstream(taskReturnedValue)) {\n      return taskReturnedValue;\n    }\n\n    // TODO: add promise handling if needed at some point.\n\n    done();\n  });\n}\n\n/**\n * Reads the files in the given root directory and executes the given callback per found file.\n * @param {string}   root - The root directory to read.\n * @param {function} cb   - The callback to execute per found file.\n */\nfunction readDir(root: string, cb: (taskname: string) => void) {\n  if (!existsSync(root)) {\n    return;\n  }\n\n  walk(root);\n\n  function walk(path: string) {\n    let files = readdirSync(path);\n    for (let i = 0; i < files.length; i += 1) {\n      let file = files[i];\n      let curPath = join(path, file);\n      if (lstatSync(curPath).isFile() && /\\.ts$/.test(file)) {\n        let taskname = file.replace(/\\.ts$/, '');\n        cb(taskname);\n      }\n    }\n  }\n}\n"]}