{"version":3,"file":"/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/template_locals.ts","sources":["/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/template_locals.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAClC,sBAAqB,OAAO,CAAC,CAAA;AAC7B,qBAAqB,MAAM,CAAC,CAAA;AAE5B,uBAAmB,cAAc,CAAC,CAAA;AAOlC;IAAA;QACU,6BAAwB,GAAG,KAAK,CAAC;QACjC,uBAAkB,GAAG,IAAI,CAAC;IA6CpC,CAAC;IA3CC,8DAA8B,GAA9B;QACE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACD,2DAA2B,GAA3B;QACE,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAGD,qCAAK,GAAL;QACE,IAAM,aAAa,GAAG,YAAI,CAAC,YAAY,CAAC,IAAI,YAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC;QACxE,IAAM,UAAU,GAAG,gBAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;QAChE,IAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAChE,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,mCAAmC,CAAC,CAAC;QACvE,CAAC;QAED,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;QAC/D,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EACzB,gBAAM,EACN,EAAE,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS,EAAE,CAClF,CAAC;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAM,CAAC,iBAAiB,CAAC,EAAC,CAAC,CAAC;QACvF,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAEO,yCAAS,GAAjB,UAAkB,IAAY,EAAE,GAAW;QACzC,IAAM,UAAU,GAAG,WAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACnC,IAAI,MAAW,CAAC;QAChB,IAAI,CAAC;YACH,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,GAAG,IAAI,CAAC;YACd,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACvC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;;IACH,4BAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,6BAAqB,wBA+CjC,CAAA","sourcesContent":["import * as util from 'gulp-util';\nimport { argv } from 'yargs';\nimport { join } from 'path';\n\nimport Config from '../../config';\n\n/**\n * Builds an object consisting of the base configuration provided by confg/seed.config.ts, the additional\n * project specific overrides as defined in config/project.config.ts and including the base environment config as defined in env/base.ts\n * and the environment specific overrides (for instance if env=dev then as defined in env/dev.ts).\n */\nexport class TemplateLocalsBuilder {\n  private stringifySystemConfigDev = false;\n  private stringifyEnvConfig = true;\n\n  withStringifiedSystemConfigDev() {\n    this.stringifySystemConfigDev = true;\n    return this;\n  }\n  withoutStringifiedEnvConfig() {\n    this.stringifyEnvConfig = false;\n    return this;\n  }\n\n\n  build() {\n    const configEnvName = argv['env-config'] || argv['config-env'] || 'dev';\n    const configPath = Config.getPluginConfig('environment-config');\n    const envOnlyConfig = this.getConfig(configPath, configEnvName);\n    const baseConfig = this.getConfig(configPath, 'base');\n\n    if (!envOnlyConfig) {\n      throw new Error(configEnvName + ' is an invalid configuration name');\n    }\n\n    const envConfig = Object.assign({}, baseConfig, envOnlyConfig);\n    let locals = Object.assign({},\n        Config,\n        { ENV_CONFIG: this.stringifyEnvConfig ? JSON.stringify(envConfig) : envConfig }\n    );\n    if (this.stringifySystemConfigDev) {\n      Object.assign(locals, {SYSTEM_CONFIG_DEV: JSON.stringify(Config.SYSTEM_CONFIG_DEV)});\n    }\n    return locals;\n  }\n\n  private getConfig(path: string, env: string) {\n    const configPath = join(path, env);\n    let config: any;\n    try {\n      config = JSON.parse(JSON.stringify(require(configPath)));\n    } catch (e) {\n      config = null;\n      util.log(util.colors.red(e.message));\n    }\n\n    return config;\n  };\n}\n"]}