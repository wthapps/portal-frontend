{"version":3,"file":"/home/hdthinh/wthapps/portal-frontend/tools/tasks/seed/build.index.dev.ts","sources":["/home/hdthinh/wthapps/portal-frontend/tools/tasks/seed/build.index.dev.ts"],"names":[],"mappings":"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","sourcesContent":["import * as gulp from 'gulp';\nimport * as gulpLoadPlugins from 'gulp-load-plugins';\nimport { join } from 'path';\nimport * as slash from 'slash';\n\nimport Config from '../../config';\nimport { TemplateLocalsBuilder } from '../../utils';\n\nconst plugins = <any>gulpLoadPlugins();\n\n\n/**\n * Executes the build process, injecting the shims and libs into the `index.hml` for the development environment.\n */\nexport = () => {\n  return gulp.src(join(Config.APP_SRC, 'index.html'))\n    .pipe(inject('shims'))\n    .pipe(inject('libs'))\n    .pipe(inject())\n    .pipe(plugins.template(new TemplateLocalsBuilder().withoutStringifiedEnvConfig().build()))\n    .pipe(gulp.dest(Config.APP_DEST));\n};\n\n/**\n * Injects the file with the given name.\n * @param {string} name - The file to be injected.\n */\nfunction inject(name?: string) {\n  return plugins.inject(gulp.src(getInjectablesDependenciesRef(name), { read: false }), {\n    name,\n    transform: transformPath()\n  });\n}\n\n/**\n * Returns the injectable dependency, mapping its filename to its path.\n * @param {string} name - The dependency to be mapped.\n */\nfunction getInjectablesDependenciesRef(name?: string) {\n  return Config.DEPENDENCIES\n    .filter(dep => dep['inject'] && dep['inject'] === (name || true))\n    .map(mapPath);\n}\n\n/**\n * Maps the path of the given dependency to its path according to the applications environment.\n * @param {any} dep - The dependency to be mapped.\n */\nfunction mapPath(dep: any) {\n  let envPath = dep.src;\n  if (envPath.startsWith(Config.APP_SRC) && !envPath.endsWith('.scss')) {\n    envPath = join(Config.APP_DEST, envPath.replace(Config.APP_SRC, ''));\n  } else if (envPath.startsWith(Config.APP_SRC) && envPath.endsWith('.scss')) {\n    envPath = envPath.replace(Config.ASSETS_SRC, Config.CSS_DEST).replace('.scss', '.css');\n  }\n  return envPath;\n}\n\n/**\n * Transform the path of a dependency to its location within the `dist` directory according to the applications\n * environment.\n */\nfunction transformPath() {\n  return function (filepath: string) {\n    if (filepath.startsWith(`/${Config.APP_DEST}`)) {\n      filepath = filepath.replace(`/${Config.APP_DEST}`, '');\n    }\n    arguments[0] = join(Config.APP_BASE, filepath) + `?${Date.now()}`;\n    return slash(plugins.inject.transform.apply(plugins.inject.transform, arguments));\n  };\n}\n"]}