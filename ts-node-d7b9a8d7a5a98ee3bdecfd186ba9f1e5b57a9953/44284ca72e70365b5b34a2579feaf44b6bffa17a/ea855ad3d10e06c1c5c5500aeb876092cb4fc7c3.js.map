{"version":3,"file":"/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/code_change_tools.ts","sources":["/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/code_change_tools.ts"],"names":[],"mappings":";AAAA,IAAY,WAAW,WAAM,cAAc,CAAC,CAAA;AAG5C,uBAAmB,cAAc,CAAC,CAAA;AAElC;IAAA;QACU,WAAM,GAAa,EAAE,CAAC;QACtB,cAAS,GAAG,IAAI,CAAC;IAsB3B,CAAC;IApBC,sBAAI,+CAAgB;aAApB;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC7B,CAAC;;;OAAA;IAED,sBAAI,uCAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAED,mCAAO,GAAP,UAAQ,IAAY;QAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,oCAAQ,GAAR,UAAS,KAAe;QAAxB,iBAEC;QADC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC;IACtC,CAAC;IAED,iCAAK,GAAL;QACE,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IACH,wBAAC;AAAD,CAAC,AAxBD,IAwBC;AAEU,yBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAKvD,IAAI,SAAS,GAAG;IACd,WAAW,CAAC,IAAI,CAAC,gBAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC;AAKF,IAAI,MAAM,GAAG;IACX,SAAS,EAAE,CAAC;AACd,CAAC;AAYQ,cAAM,UAZb;AAKF,IAAI,OAAO,GAAG,UAAC,KAAU;IACvB,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IACD,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC;AAEgB,eAAO,WAFtB;AAEyB","sourcesContent":["import * as browserSync from 'browser-sync';\n// import * as path from 'path';\n\nimport Config from '../../config';\n\nclass ChangeFileManager {\n  private _files: string[] = [];\n  private _pristine = true;\n\n  get lastChangedFiles() {\n    return this._files.slice();\n  }\n\n  get pristine() {\n    return this._pristine;\n  }\n\n  addFile(file: string) {\n    this._pristine = false;\n    this._files.push(file);\n  }\n\n  addFiles(files: string[]) {\n    files.forEach(f => this.addFile(f));\n  }\n\n  clear() {\n    this._files = [];\n  }\n}\n\nexport let changeFileManager = new ChangeFileManager();\n\n/**\n * Initialises BrowserSync with the configuration defined in seed.config.ts (or if overriden: project.config.ts).\n */\nlet runServer = () => {\n  browserSync.init(Config.getPluginConfig('browser-sync'));\n};\n\n/**\n * Runs BrowserSync as the listening process for the application.\n */\nlet listen = () => {\n  runServer();\n};\n\n/**\n * Provides a flag to mark which files have changed and reloads BrowserSync accordingly.\n */\nlet changed = (files: any) => {\n  if (!(files instanceof Array)) {\n    files = [files];\n  }\n  browserSync.reload(files);\n};\n\nexport { listen, changed };\n"]}