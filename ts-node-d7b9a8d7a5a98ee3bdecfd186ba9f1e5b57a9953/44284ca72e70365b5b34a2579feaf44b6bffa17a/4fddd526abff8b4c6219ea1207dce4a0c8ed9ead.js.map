{"version":3,"file":"/home/hdthinh/wthapps/portal-frontend/tools/tasks/task.ts","sources":["/home/hdthinh/wthapps/portal-frontend/tools/tasks/task.ts"],"names":[],"mappings":";AAGA;IAAA;IAqBA,CAAC;IAdC,uBAAQ,GAAR,UAAS,KAAe;QACtB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAYH,WAAC;AAAD,CAAC,AArBD,IAqBC;AArBqB,YAAI,OAqBzB,CAAA","sourcesContent":["/**\n * Base class for all tasks.\n */\nexport abstract class Task {\n  /**\n   * Override this task if you want to implement some custom\n   * task activation mechanism. By default each task will be always executed.\n   *\n   * @param {string[]} files A list of files changed since the previous watch.\n   */\n  shallRun(files: string[]): boolean {\n    return true;\n  }\n\n  /**\n   * Implements your task behavior.\n   *\n   * @param {any} done A function which should be activated once your task completes.\n   * @return {ReadWriteStream | Promise<any> | void} This method can either return a promise\n   * which should be resolved once your task execution completes, a stream\n   * which should throw an end event once your task execution completes\n   * or nothing in case you will manually invoke the `done` method.\n   */\n  abstract run(done?: any, files?: string[]): any | Promise<any> | void;\n}\n"]}