{"version":3,"file":"/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/server.ts","sources":["/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/server.ts"],"names":[],"mappings":";AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,QAAQ,WAAM,8BAA8B,CAAC,CAAA;AACzD,IAAY,YAAY,WAAM,MAAM,CAAC,CAAA;AACrC,qBAAwB,MAAM,CAAC,CAAA;AAE/B,IAAY,cAAc,WAAM,qBAAqB,CAAC,CAAA;AACtD,uBAAmB,cAAc,CAAC,CAAA;AAKlC;IACE,cAAc,CAAC,MAAM,EAAE,CAAC;AAC1B,CAAC;AAFe,gBAAQ,WAEvB,CAAA;AAOD,0BAAiC,CAAK;IACpC,IAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC;IACtB,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC;AAHe,wBAAgB,mBAG/B,CAAA;AAKD;IACE,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IAEvB,MAAM,CAAC,GAAG,CACR,gBAAM,CAAC,QAAQ,EACf,OAAO,CAAC,MAAM,CAAC,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,gBAAM,CAAC,SAAS,CAAC,CAAC,CACzD,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC,gBAAM,CAAC,SAAS,EAAE;QAC9B,OAAA,YAAY,CAAC,mBAAmB,GAAG,gBAAM,CAAC,SAAS,GAAG,gBAAM,CAAC,QAAQ,CAAC;IAAtE,CAAsE,CACvE,CAAC;AACJ,CAAC;AAXe,iBAAS,YAWxB,CAAA;AAKD;IACE,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IAEvB,MAAM,CAAC,GAAG,CACR,gBAAM,CAAC,QAAQ,EACf,OAAO,CAAC,MAAM,CAAC,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,gBAAM,CAAC,eAAe,CAAC,CAAC,CAC/D,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC,gBAAM,CAAC,aAAa,EAAE;QAClC,OAAA,YAAY,CAAC,mBAAmB,GAAG,gBAAM,CAAC,aAAa,GAAG,gBAAM,CAAC,QAAQ,CAAC;IAA1E,CAA0E,CAC3E,CAAC;AACJ,CAAC;AAXe,qBAAa,gBAW5B,CAAA;AAKD;IACE,IAAI,IAAI,GAAG,cAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,gBAAM,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,MAAM,GAAG,OAAO,EAAE,CAAC;IAEvB,GAAG,CAAC,CAAc,UAAuB,EAAvB,KAAA,gBAAM,CAAC,gBAAgB,EAAvB,cAAuB,EAAvB,IAAuB,CAAC;QAArC,IAAI,KAAK,SAAA;QACZ,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACnB;IAED,MAAM,CAAC,GAAG,CAAC,gBAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAElD,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,UAAI,EAAE,CAAC,CAAC,CAAC;IAE7C,MAAM,CAAC,MAAM,CAAC,gBAAM,CAAC,IAAI,EAAE;QACzB,OAAA,YAAY,CAAC,mBAAmB,GAAG,gBAAM,CAAC,IAAI,GAAG,gBAAM,CAAC,QAAQ,CAAC;IAAjE,CAAiE,CAClE,CAAC;AACJ,CAAC;AAfe,iBAAS,YAexB,CAAA;AAAA,CAAC","sourcesContent":["import * as express from 'express';\nimport * as fallback from 'express-history-api-fallback';\nimport * as openResource from 'open';\nimport { resolve } from 'path';\n\nimport * as codeChangeTool from './code_change_tools';\nimport Config from '../../config';\n\n/**\n * Serves the Single Page Application. More specifically, calls the `listen` method, which itself launches BrowserSync.\n */\nexport function serveSPA() {\n  codeChangeTool.listen();\n}\n\n/**\n * This utility method is used to notify that a file change has happened and subsequently calls the `changed` method,\n * which itself initiates a BrowserSync reload.\n * @param {any} e - The file that has changed.\n */\nexport function notifyLiveReload(e:any) {\n  let fileName = e.path;\n  codeChangeTool.changed(fileName);\n}\n\n/**\n * Starts a new `express` server, serving the static documentation files.\n */\nexport function serveDocs() {\n  let server = express();\n\n  server.use(\n    Config.APP_BASE,\n    express.static(resolve(process.cwd(), Config.DOCS_DEST))\n  );\n\n  server.listen(Config.DOCS_PORT, () =>\n    openResource('http://localhost:' + Config.DOCS_PORT + Config.APP_BASE)\n  );\n}\n\n/**\n * Starts a new `express` server, serving the static unit test code coverage report.\n */\nexport function serveCoverage() {\n  let server = express();\n\n  server.use(\n    Config.APP_BASE,\n    express.static(resolve(process.cwd(), Config.COVERAGE_TS_DIR))\n  );\n\n  server.listen(Config.COVERAGE_PORT, () =>\n    openResource('http://localhost:' + Config.COVERAGE_PORT + Config.APP_BASE)\n  );\n}\n\n/**\n * Starts a new `express` server, serving the built files from `dist/prod`.\n */\nexport function serveProd() {\n  let root = resolve(process.cwd(), Config.PROD_DEST);\n  let server = express();\n\n  for (let proxy of Config.PROXY_MIDDLEWARE) {\n    server.use(proxy);\n  }\n\n  server.use(Config.APP_BASE, express.static(root));\n\n  server.use(fallback('index.html', { root }));\n\n  server.listen(Config.PORT, () =>\n    openResource('http://localhost:' + Config.PORT + Config.APP_BASE)\n  );\n};\n"]}