{"version":3,"file":"/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/tasks_tools.ts","sources":["/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/tasks_tools.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, lstatSync, readFileSync, readdirSync } from 'fs';\nimport * as runSequence from 'run-sequence';\nimport * as gulp from 'gulp';\nimport * as util from 'gulp-util';\nimport * as isstream from 'isstream';\nimport { join } from 'path';\nimport * as tildify from 'tildify';\n\nimport { changeFileManager } from './code_change_tools';\nimport { Task } from '../../tasks/task';\n\n/**\n * Loads the tasks within the given path.\n * @param {string} path - The path to load the tasks from.\n */\nexport function loadTasks(path: string): void {\n  util.log('Loading tasks folder', util.colors.yellow(path));\n  readDir(path, taskname => registerTask(taskname, path));\n}\n\nfunction validateTasks(tasks: any) {\n  return Object.keys(tasks)\n    .map((taskName: string) => {\n       if (!tasks[taskName] ||\n        !Array.isArray(tasks[taskName]) ||\n        tasks[taskName].some((t: any) => typeof t !== 'string')) {\n         return taskName;\n       }\n       return null;\n    }).filter((taskName: string) => !!taskName);\n}\n\nfunction registerTasks(tasks: any) {\n  Object.keys(tasks)\n    .forEach((t: string) => {\n      gulp.task(t, (done: any) => runSequence.apply(null, [...tasks[t], done]));\n    });\n}\n\nfunction getInvalidTaskErrorMessage(invalid: string[], file: string) {\n  let error = `Invalid configuration in \"${file}. `;\n  if (invalid.length === 1) {\n    error += 'Task';\n  } else {\n    error += 'Tasks';\n  }\n  error += ` ${invalid.map((t: any) => `\"${t}\"`).join(', ')} do not have proper format.`;\n  return error;\n}\n\n/**\n * Defines complex, composite tasks. The composite tasks\n * are simply a composition of another tasks.\n * Each composite tasks has the following format:\n *\n * \"composite_task\": [\"task1\", \"task2\"]\n *\n * This means that the format should be flat, with no nesting.\n *\n * The existing composite tasks are defined in\n * \"tools/config/seed.tasks.json\" and can be overriden by\n * editing the composite tasks project configuration.\n *\n * By default it is located in: \"tools/config/project.tasks.json\".\n *\n * Override existing tasks by simply providing a task\n * name and a list of tasks that this task hould execute.\n *\n * For instance:\n * ```\n * {\n *  \"test\": [\n *    \"build.test\",\n *    \"mocha.run\"\n *  ]\n * }\n * ```\n *\n * Note that the tasks do not support nested objects.\n */\nexport function loadCompositeTasks(seedTasksFile: string, projectTasksFile: string): void {\n  let seedTasks: any;\n  let projectTasks: any;\n  try {\n    seedTasks = JSON.parse(readFileSync(seedTasksFile).toString());\n    projectTasks = JSON.parse(readFileSync(projectTasksFile).toString());\n  } catch (e) {\n    util.log('Cannot load the task configuration files: ' + e.toString());\n    return;\n  }\n  [[seedTasks, seedTasksFile], [projectTasks, projectTasksFile]]\n    .forEach(([tasks, file]: [string, string]) => {\n      const invalid = validateTasks(tasks);\n      if (invalid.length) {\n        const errorMessage = getInvalidTaskErrorMessage(invalid, file);\n        util.log(util.colors.red(errorMessage));\n        process.exit(1);\n      }\n    });\n  const mergedTasks = Object.assign({}, seedTasks, projectTasks);\n  registerTasks(mergedTasks);\n}\n\nfunction normalizeTask(task: any, taskName: string) {\n  if (task instanceof Task) {\n    return task;\n  }\n  if (task.prototype && task.prototype instanceof Task) {\n    return new task();\n  }\n  if (typeof task === 'function') {\n    return new class AnonTask extends Task {\n      run(done: any) {\n        if (task.length > 0) {\n          return task(done);\n        }\n\n        const taskReturnedValue = task();\n        if (isstream(taskReturnedValue)) {\n          return taskReturnedValue;\n        }\n\n        done();\n      }\n    };\n  }\n  throw new Error(taskName + ' should be instance of the class ' +\n    'Task, a function or a class which extends Task.');\n}\n\n/**\n * Registers the task by the given taskname and path.\n * @param {string} taskname - The name of the task.\n * @param {string} path     - The path of the task.\n */\nfunction registerTask(taskname: string, path: string): void {\n  const TASK = join(path, taskname);\n  util.log('Registering task', util.colors.yellow(tildify(TASK)));\n\n  gulp.task(taskname, (done: any) => {\n    const task = normalizeTask(require(TASK), TASK);\n\n    if (changeFileManager.pristine || task.shallRun(changeFileManager.lastChangedFiles)) {\n      const result = task.run(done, changeFileManager.lastChangedFiles);\n      if (result && typeof result.catch === 'function') {\n        result.catch((e: any) => {\n          util.log(`Error while running \"${TASK}\"`, e);\n        });\n      }\n      return result;\n    } else {\n      done();\n    }\n  });\n}\n\n/**\n * Reads the files in the given root directory and executes the given callback per found file.\n * @param {string}   root - The root directory to read.\n * @param {function} cb   - The callback to execute per found file.\n */\nfunction readDir(root: string, cb: (taskname: string) => void) {\n  if (!existsSync(root)) {\n    return;\n  }\n\n  walk(root);\n\n  function walk(path: string) {\n    let files = readdirSync(path);\n    for (let i = 0; i < files.length; i += 1) {\n      let file = files[i];\n      let curPath = join(path, file);\n      if (lstatSync(curPath).isFile() && /\\.ts$/.test(file)) {\n        let taskname = file.replace(/\\.ts$/, '');\n        cb(taskname);\n      }\n    }\n  }\n}\n"]}