{"version":3,"file":"/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/clean.ts","sources":["/home/hdthinh/wthapps/portal-frontend/tools/utils/seed/clean.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,WAAW,CAAC,CAAA;AAClC,qBAAoC,MAAM,CAAC,CAAA;AAC3C,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAEjC,uBAAmB,cAAc,CAAC,CAAA;AAMlC,eAAsB,KAAsB;IAC1C,MAAM,CAAC,UAAA,IAAI;QACT,IAAI,YAAsB,CAAC;QAC3B,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;YAC3B,YAAY,GAAG,KAAK,CAAC;QACvB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,YAAY,GAAG,CAAS,KAAK,CAAC,CAAC;QACjC,CAAC;QAED,IAAI,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,CAAC;YAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAA,OAAO;gBACxB,IAAM,YAAY,GAAW,eAAQ,CAAC,gBAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBAC9D,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAClC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,8DAA2D,gBAAS,CAAC,CAAC,CAAC,OAAG,CAAC,CAAC,CAAC;oBAC9G,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,CAAC,EAAE,UAAA,CAAC;wBACT,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACN,IAAI,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;wBACxC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;wBACpD,CAAC;wBACD,OAAO,EAAE,CAAC;oBACZ,CAAC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,CAAC,IAAI,IAAI,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC,EAAE,EAArB,CAAqB,CAAC;aACpD,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,kCAA+B,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAM,CAAG,CAAC,CAAC,EAA9F,CAA8F,CAAC,CAAC;IAChH,CAAC,CAAC;AACJ,CAAC;AA9Be,aAAK,QA8BpB,CAAA","sourcesContent":["import * as util from 'gulp-util';\nimport { relative, normalize } from 'path';\nimport * as rimraf from 'rimraf';\n\nimport Config from '../../config';\n\n/**\n * Cleans the given path(s) using `rimraf`.\n * @param {string or string[]} paths - The path or list of paths to clean.\n */\nexport function clean(paths: string|string[]): (done: () => void) => void {\n  return done => {\n    let pathsToClean: string[];\n    if (paths instanceof Array) {\n      pathsToClean = paths;\n    } else {\n      pathsToClean = [<string>paths];\n    }\n\n    let promises = pathsToClean.map(p => {\n      return new Promise(resolve => {\n        const relativePath: string = relative(Config.PROJECT_ROOT, p);\n        if (relativePath.startsWith('..')) {\n          util.log(util.colors.bgRed.white(`Cannot remove files outside the project root but tried \"${normalize(p)}\"`));\n          process.exit(1);\n        } else {\n          rimraf(p, e => {\n            if (e) {\n              util.log('Clean task failed with', e);\n            } else {\n              util.log('Deleted', util.colors.yellow(p || '-'));\n            }\n            resolve();\n          });\n        }\n      });\n    });\n    Promise.all(promises).then(() => (done || (() => 1))())\n      .catch(e => util.log(util.colors.red(`Error while removing files \"${[].concat(paths).join(', ')}\", ${e}`)));\n  };\n}\n\n"]}